knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(forcats)
library(MatchIt)
library(MASS)
library(mgcv)
library(broom)
highDim<-read.csv(file ='../data/highDim_dataset.csv')
lowDim<-read.csv(file ='../data/lowDim_dataset.csv')
lowDim1 <- lowDim %>%
gather(key="text", value="value") %>%
mutate(text = gsub("\\.", " ",text)) %>%
mutate(value = round(as.numeric(value),0))
lowDim1 %>%
mutate(text = fct_reorder(text, value)) %>%
ggplot( aes(x=value, color=text, fill=text)) +
geom_histogram(alpha=0.6, binwidth = 5) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("") +
ylab("Assigned Probability (%)") +
facet_wrap(~text)
# matchi it
match_model <- matchit(A ~ Y+V1,
data = lowDim, method = "nearest")
?gam()
resampled_lowDim <- lowDim %>%
mutate(propensity_gam = predict(mod, type = "response"),
weight_gam = 1 / propensity_gam * A + 1 / (1 - propensity_gam) * (1 - A))
rlm()
?rlm()
tidy(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))
# matchi it
match_model <- matchit(A ~ Y+V1,
data = lowDim, method = "nearest")
match_data <- match.data(match_model)
# IPW
mod <- gam(A ~ Y+V1, data = lowDim, family = "binomial")
resampled_lowDim <- lowDim %>%
mutate(propensity_gam = predict(mod, type = "response"),
weight_gam = 1 / propensity_gam * A + 1 / (1 - propensity_gam) * (1 - A))
tidy(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))
#
?gam
model<-rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam))
predict(model)
Y
resampled_lowDim
?predict
# matchi it
match_model <- matchit(A ~ Y+V1,
data = lowDim, method = "nearest")
match_data <- match.data(match_model)
# IPW
mod <- gam(A ~ Y+V1, data = lowDim, family = "binomial")
resampled_lowDim <- lowDim %>%
mutate(propensity_gam = predict(mod, type = "response"),
weight_gam = 1 / propensity_gam * A + 1 / (1 - propensity_gam) * (1 - A))
tidy(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))
model<-rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam))
predict(model,)
#
avg(predict(model))
predict(model)
as.numeric(predict(model))
avg(as.numeric(predict(model)))
tidy(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))
tidy(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))['A']
tidy(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))["A"]
coef(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))["A"]
# IPW
mod <- gam(A ~ ., data = lowDim, family = "binomial")
# IPW
mod <- gam(A ~., data = lowDim, family = "binomial")
lowDim
# Avg treatment of A
coef(rlm(Y ~  A +V1,data = resampled_lowDim,weights = as.vector(weight_gam)))["A"]
highDim
lowDim
highDim
?gam
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(forcats)
library(MatchIt)
library(MASS)
library(mgcv)
library(broom)
library(plsmselect)
highDim<-read.csv(file ='../data/highDim_dataset.csv')
lowDim<-read.csv(file ='../data/lowDim_dataset.csv')
View(highDim)
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(glmnet)
library(tidyverse)
# Load the data
highDim<-read.csv(file ='../data/highDim_dataset.csv')
lowDim<-read.csv(file ='../data/lowDim_dataset.csv')
# Split into x, A and y
hY<-highDim$Y
hA<-highDim$A
hX<-as.matrix(highDim[,-c(1,2)])
lY<-lowDim$Y
lA<-lowDim$A
lX<-as.matrix(lowDim[,-c(1,2)])
# IPW
# Setting alpha = 1 implements lasso regression
lambdas <- 10^seq(2, -3, by = -.1)
lasso_hd <- cv.glmnet(hX, hY, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5)
lasso_ld <- cv.glmnet(lX, lY, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5)
# Calculate the propensity score
lasso_model_hd <- glmnet(hX, hY, alpha = 1, lambda = lasso_hd$lambda.min, standardize = TRUE)
lasso_model_ld <- glmnet(lX, lY, alpha = 1, lambda = lasso_ld$lambda.min, standardize = TRUE)
propensity_hd = predict(lasso_model_hd, s = lasso_hd$lambda.min, newx = hX)
propensity_ld = predict(lasso_model_ld, s = lasso_ld$lambda.min, newx = lX)
# Calculate the weights
weight_hd = 1 / propensity_hd * hA + 1 / (1 - propensity_hd) * (1 - hA)
weight_ld = 1 / propensity_ld * lA + 1 / (1 - propensity_ld) * (1 - lA)
resampled_lowDim <- lowDim %>%
mutate(propensity_ld = propensity_ld,
weight_ld = weight_ld,
Y_Weight = Y*weight_ld)
resampled_highDim <- highDim %>%
mutate(propensity_hd = propensity_hd,
weight_hd = weight_hd,
Y_Weight= Y*weight_hd )
# Estimate ATE
ATE<-function(data){
ATE<-1/nrow(data)*(sum(data[data$A==1,"Y_Weight"])-sum(data[data$A==0,"Y_Weight"]))
return(ATE)
}
ATE_highDim<-ATE(resampled_highDim)
ATE_lowDim<-ATE(resampled_lowDim)
matrix(c(ATE_highDim,ATE_lowDim),nrow = 1, dimnames = list(c("ATE"), c("highDim","lowDim")))
